import { Injectable } from '@angular/core';
import { DependencyInjector } from '../util/dependency-injector';
import { LibConfig } from './lib-config';
import { DEFAULT_ROUTE_NAME } from './hateoas-configuration.interface';
import { ConsoleLogger } from '../logger/console-logger';
import { ResourceUtils } from '../util/resource.utils';
import { Resource } from '../model/resource/resource';
import { ResourceCollection } from '../model/resource/resource-collection';
import { EmbeddedResource } from '../model/resource/embedded-resource';
import { PagedResourceCollection } from '../model/resource/paged-resource-collection';
import { ValidationUtils } from '../util/validation.utils';
import { isString } from 'lodash-es';
import * as i0 from "@angular/core";
/**
 * This service for configuration library.
 *
 * You should inject this service in your main AppModule and pass
 * configuration using {@link #configure()} method.
 */
// tslint:disable:no-string-literal
export class NgxHateoasClientConfigurationService {
    constructor(injector) {
        this.injector = injector;
        DependencyInjector.injector = injector;
        // Setting resource types to prevent circular dependencies
        ResourceUtils.useResourceType(Resource);
        ResourceUtils.useResourceCollectionType(ResourceCollection);
        ResourceUtils.usePagedResourceCollectionType(PagedResourceCollection);
        ResourceUtils.useEmbeddedResourceType(EmbeddedResource);
    }
    static isCommonRouteConfig(config) {
        return 'rootUrl' in config.http && isString(config.http['rootUrl']);
    }
    /**
     * Configure library with client params.
     *
     * @param config suitable client properties needed to properly library work
     */
    configure(config) {
        if (NgxHateoasClientConfigurationService.isCommonRouteConfig(config)) {
            config = {
                ...config,
                http: {
                    [DEFAULT_ROUTE_NAME]: { ...config.http }
                }
            };
        }
        for (const [key, value] of Object.entries(config.http)) {
            ValidationUtils.validateInputParams({ config, routeName: key, baseApi: value.rootUrl });
        }
        LibConfig.setConfig(config);
        ConsoleLogger.objectPrettyInfo('HateoasClient was configured with options', config);
    }
}
NgxHateoasClientConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxHateoasClientConfigurationService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
NgxHateoasClientConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxHateoasClientConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxHateoasClientConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhhdGVvYXMtY2xpZW50LWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oYXRlb2FzLWNsaWVudC9zcmMvbGliL2NvbmZpZy9uZ3gtaGF0ZW9hcy1jbGllbnQtY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDakUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQXVDLE1BQU0sbUNBQW1DLENBQUM7QUFDNUcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBRXJDOzs7OztHQUtHO0FBQ0gsbUNBQW1DO0FBSW5DLE1BQU0sT0FBTyxvQ0FBb0M7SUFFL0MsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxrQkFBa0IsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3ZDLDBEQUEwRDtRQUMxRCxhQUFhLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVELGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3RFLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBNEI7UUFDN0QsT0FBTyxTQUFTLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksU0FBUyxDQUFDLE1BQTRCO1FBQzNDLElBQUksb0NBQW9DLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEUsTUFBTSxHQUFHO2dCQUNQLEdBQUcsTUFBTTtnQkFDVCxJQUFJLEVBQUU7b0JBQ0osQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUMsR0FBRyxNQUFNLENBQUMsSUFBcUIsRUFBQztpQkFDeEQ7YUFDRixDQUFDO1NBQ0g7UUFDRCxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEQsZUFBZSxDQUFDLG1CQUFtQixDQUFDLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQ3ZGO1FBQ0QsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QixhQUFhLENBQUMsZ0JBQWdCLENBQUMsMkNBQTJDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7aUlBbkNVLG9DQUFvQztxSUFBcEMsb0NBQW9DLGNBRm5DLE1BQU07MkZBRVAsb0NBQW9DO2tCQUhoRCxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEZXBlbmRlbmN5SW5qZWN0b3IgfSBmcm9tICcuLi91dGlsL2RlcGVuZGVuY3ktaW5qZWN0b3InO1xuaW1wb3J0IHsgTGliQ29uZmlnIH0gZnJvbSAnLi9saWItY29uZmlnJztcbmltcG9ydCB7IERFRkFVTFRfUk9VVEVfTkFNRSwgSGF0ZW9hc0NvbmZpZ3VyYXRpb24sIFJlc291cmNlUm91dGUgfSBmcm9tICcuL2hhdGVvYXMtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9jb25zb2xlLWxvZ2dlcic7XG5pbXBvcnQgeyBSZXNvdXJjZVV0aWxzIH0gZnJvbSAnLi4vdXRpbC9yZXNvdXJjZS51dGlscyc7XG5pbXBvcnQgeyBSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL3Jlc291cmNlL3Jlc291cmNlJztcbmltcG9ydCB7IFJlc291cmNlQ29sbGVjdGlvbiB9IGZyb20gJy4uL21vZGVsL3Jlc291cmNlL3Jlc291cmNlLWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgRW1iZWRkZWRSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL3Jlc291cmNlL2VtYmVkZGVkLXJlc291cmNlJztcbmltcG9ydCB7IFBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbW9kZWwvcmVzb3VyY2UvcGFnZWQtcmVzb3VyY2UtY29sbGVjdGlvbic7XG5pbXBvcnQgeyBWYWxpZGF0aW9uVXRpbHMgfSBmcm9tICcuLi91dGlsL3ZhbGlkYXRpb24udXRpbHMnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG4vKipcbiAqIFRoaXMgc2VydmljZSBmb3IgY29uZmlndXJhdGlvbiBsaWJyYXJ5LlxuICpcbiAqIFlvdSBzaG91bGQgaW5qZWN0IHRoaXMgc2VydmljZSBpbiB5b3VyIG1haW4gQXBwTW9kdWxlIGFuZCBwYXNzXG4gKiBjb25maWd1cmF0aW9uIHVzaW5nIHtAbGluayAjY29uZmlndXJlKCl9IG1ldGhvZC5cbiAqL1xuLy8gdHNsaW50OmRpc2FibGU6bm8tc3RyaW5nLWxpdGVyYWxcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hIYXRlb2FzQ2xpZW50Q29uZmlndXJhdGlvblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgRGVwZW5kZW5jeUluamVjdG9yLmluamVjdG9yID0gaW5qZWN0b3I7XG4gICAgLy8gU2V0dGluZyByZXNvdXJjZSB0eXBlcyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcGVuZGVuY2llc1xuICAgIFJlc291cmNlVXRpbHMudXNlUmVzb3VyY2VUeXBlKFJlc291cmNlKTtcbiAgICBSZXNvdXJjZVV0aWxzLnVzZVJlc291cmNlQ29sbGVjdGlvblR5cGUoUmVzb3VyY2VDb2xsZWN0aW9uKTtcbiAgICBSZXNvdXJjZVV0aWxzLnVzZVBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uVHlwZShQYWdlZFJlc291cmNlQ29sbGVjdGlvbik7XG4gICAgUmVzb3VyY2VVdGlscy51c2VFbWJlZGRlZFJlc291cmNlVHlwZShFbWJlZGRlZFJlc291cmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGlzQ29tbW9uUm91dGVDb25maWcoY29uZmlnOiBIYXRlb2FzQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAncm9vdFVybCcgaW4gY29uZmlnLmh0dHAgJiYgaXNTdHJpbmcoY29uZmlnLmh0dHBbJ3Jvb3RVcmwnXSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlIGxpYnJhcnkgd2l0aCBjbGllbnQgcGFyYW1zLlxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnIHN1aXRhYmxlIGNsaWVudCBwcm9wZXJ0aWVzIG5lZWRlZCB0byBwcm9wZXJseSBsaWJyYXJ5IHdvcmtcbiAgICovXG4gIHB1YmxpYyBjb25maWd1cmUoY29uZmlnOiBIYXRlb2FzQ29uZmlndXJhdGlvbik6IHZvaWQge1xuICAgIGlmIChOZ3hIYXRlb2FzQ2xpZW50Q29uZmlndXJhdGlvblNlcnZpY2UuaXNDb21tb25Sb3V0ZUNvbmZpZyhjb25maWcpKSB7XG4gICAgICBjb25maWcgPSB7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgaHR0cDoge1xuICAgICAgICAgIFtERUZBVUxUX1JPVVRFX05BTUVdOiB7Li4uY29uZmlnLmh0dHAgYXMgUmVzb3VyY2VSb3V0ZX1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnLmh0dHApKSB7XG4gICAgICBWYWxpZGF0aW9uVXRpbHMudmFsaWRhdGVJbnB1dFBhcmFtcyh7Y29uZmlnLCByb3V0ZU5hbWU6IGtleSwgYmFzZUFwaTogdmFsdWUucm9vdFVybH0pO1xuICAgIH1cbiAgICBMaWJDb25maWcuc2V0Q29uZmlnKGNvbmZpZyk7XG5cbiAgICBDb25zb2xlTG9nZ2VyLm9iamVjdFByZXR0eUluZm8oJ0hhdGVvYXNDbGllbnQgd2FzIGNvbmZpZ3VyZWQgd2l0aCBvcHRpb25zJywgY29uZmlnKTtcbiAgfVxuXG59XG4iXX0=