export const DEFAULT_ROUTE_NAME = 'defaultRoute';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGF0ZW9hcy1jb25maWd1cmF0aW9uLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oYXRlb2FzLWNsaWVudC9zcmMvbGliL2NvbmZpZy9oYXRlb2FzLWNvbmZpZ3VyYXRpb24uaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVzY3JpYmUgYWxsIGNsaWVudCBjb25maWd1cmF0aW9uIHBhcmFtcy5cbiAqL1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9yZXNvdXJjZS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBFbWJlZGRlZFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvcmVzb3VyY2UvZW1iZWRkZWQtcmVzb3VyY2UnO1xuaW1wb3J0IHsgQ2FjaGVNb2RlIH0gZnJvbSAnLi4vbW9kZWwvZGVjbGFyYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUk9VVEVfTkFNRSA9ICdkZWZhdWx0Um91dGUnO1xuXG4vKipcbiAqIFVzZWQgdG8gc3BlY2lmeSBhZGRpdGlvbmFsIHtAbGluayBSZXNvdXJjZX0gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZU9wdGlvbiB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSByb3V0ZSB0aGF0IGNvbmZpZ3VyZWQgaW4ge0BsaW5rIEhhdGVvYXNDb25maWd1cmF0aW9uI2h0dHB9IGFzIHtAbGluayBNdWx0aXBsZVJlc291cmNlUm91dGVzfS5cbiAgICogQmUgZGVmYXVsdCB1c2VkIHJvdXRlIHdpdGggbmFtZSAnZGVmYXVsdFJvdXRlJy5cbiAgICpcbiAgICogU2VlIG1vcmUgYWJvdXQgdGhpcyBvcHRpb24gaW4gPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9sYWdvc2hueS9uZ3gtaGF0ZW9hcy1jbGllbnQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI29wdGlvbnNcIj5kb2N1bWVudGF0aW9uPC9hPi5cbiAgICovXG4gIHJvdXRlTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXNvdXJjZSByb3V0ZSBjb25maWcgdGhhdCBkZWZpbmVkIHdoZXJlIGZyb20gcmV0cmlldmUgcmVzb3VyY2VzLlxuICogSWYgeW91IHVzZSB0aGlzIGNvbmZpZywgdGhlbiBhIGRlZmF1bHQgcm91dGUgY3JlYXRlZCB3aXRoIG5hbWUgJ2RlZmF1bHRSb3V0ZScgd2lsbCBiZSBhc3NpZ25lZCB0byBhbGwgcmVzb3VyY2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlUm91dGUge1xuICAvKipcbiAgICogUm9vdCBzZXJ2ZXIgdXJsLlxuICAgKlxuICAgKiBGb3IgZGVmYXVsdCBTcHJpbmcgYXBwbGljYXRpb24gaXQgbG9va3MgbGlrZTogaHR0cDovL2xvY2FsaG9zdDo4MDgwLlxuICAgKi9cbiAgcm9vdFVybDogc3RyaW5nO1xuICAvKipcbiAgICogUHJveHkgdXJsIG9uIHdoaWNoIHRvIHNlbmQgcmVxdWVzdHMuXG4gICAqIElmIHBhc3NlZCB0aGVuIGl0IHVzZXMgdG8gY2hhbmdlIHJvb3RVcmwgdG8gcHJveHlVcmwgd2hlbiBnZXQgcmVsYXRpb24gbGluay5cbiAgICpcbiAgICogRm9yIGRlZmF1bHQgU3ByaW5nIGFwcGxpY2F0aW9uIGl0IGxvb2tzIGxpa2U6IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjEuXG4gICAqL1xuICBwcm94eVVybD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHNldmVyYWwgcmVzb3VyY2Ugcm91dGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE11bHRpcGxlUmVzb3VyY2VSb3V0ZXMge1xuICAvKipcbiAgICogRWFjaCByZXNvdXJjZSByb3V0ZSBpcyBkZWNsYXJlZCBhcyB7QGxpbmsgUmVzb3VyY2VSb3V0ZX0gb2JqZWN0IHdpdGggcm9vdCBhbmQgcHJveHkgdXJsIGlmIG5lZWQgaXQuXG4gICAqIFNwZWNpZmllZCByb3V0ZSBuYW1lICBpcyB1c2VkIGluIHtAbGluayBSZXNvdXJjZU9wdGlvbiNyb3V0ZU5hbWV9IHRvIHJldHJpZXZlIHJlc291cmNlIGJ5IHRoaXMgcm91dGUuXG4gICAqXG4gICAqIElmIHlvdSB3YW50IHRvIGRlY2xhcmUgb25seSBvbmUgcm91dGUsIHlvdSBuZWVkIHRvIHVzZSBkZWZhdWx0IHJvdXRlIG5hbWUgYXMgJ2RlZmF1bHRSb3V0ZScgb3IgdXNlIHNpbXBsZSB7QGxpbmsgUmVzb3VyY2VSb3V0ZX0gY29uZmlnLlxuICAgKi9cbiAgW3JvdXRlTmFtZTogc3RyaW5nXTogUmVzb3VyY2VSb3V0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIYXRlb2FzQ29uZmlndXJhdGlvbiB7XG5cbiAgLyoqXG4gICAqIEh0dHAgb3B0aW9ucy5cbiAgICoge0BsaW5rIFJlc291cmNlUm91dGV9IGRlY2xhcmUgY29tbW9uIHJlc291cmNlIHJvdXRlIHRoYXQgY3JlYXRlZCB3aXRoIGRlZmF1bHQgbmFtZSAnZGVmYXVsdFJvdXRlJy5cbiAgICoge0BsaW5rIE11bHRpcGxlUmVzb3VyY2VSb3V0ZXN9IGRlY2xhcmUgc2V2ZXJhbCByZXNvdXJjZSByb3V0ZXMsXG4gICAqIHRvIGRlZmluZSBkZWZhdWx0IHJvdXRlIGluIHRoaXMgY2FzZSwgdXNlIGRlZmF1bHQgcm91dGUgbmFtZSAnZGVmYXVsdFJvdXRlJy5cbiAgICovXG4gIGh0dHA6IFJlc291cmNlUm91dGUgfCBNdWx0aXBsZVJlc291cmNlUm91dGVzO1xuXG4gIC8qKlxuICAgKiBMb2dnaW5nIG9wdGlvbi5cbiAgICovXG4gIGxvZ3M/OiB7XG4gICAgLyoqXG4gICAgICogU2hvdWxkIHByaW50IHZlcmJvc2UgbG9ncyB0byB0aGUgY29uc29sZS5cbiAgICAgKi9cbiAgICB2ZXJib3NlTG9ncz86IGJvb2xlYW47XG4gIH07XG5cbiAgLyoqXG4gICAqIENhY2hlIG9wdGlvbnMuXG4gICAqL1xuICBjYWNoZT86IHtcbiAgICAvKipcbiAgICAgKiBXaGVuIHtAY29kZSB0cnVlfSB0aGVuIGNhY2hlIHdpbGwgYmUgdXNlZCwge0Bjb2RlIGZhbHNlfSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gYWRqdXN0IGNhY2hlIG1vcmUgZ3JhbnVsYXIgdXNpbmcge0BsaW5rIENhY2hlTW9kZX0gbW9kZXMuXG4gICAgICovXG4gICAgbW9kZT86IENhY2hlTW9kZTtcbiAgICAvKipcbiAgICAgKiBUaW1lIGluIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCBjYWNoZSBuZWVkIHRvIGJlIGV4cGlyZWQuXG4gICAgICovXG4gICAgbGlmZVRpbWU/OiBudW1iZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY2xhcmVkIHJlc291cmNlL2VtYmVkZGVkIHJlc291cmNlIHR5cGVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSByZXNvdXJjZXMgZnJvbSBzZXJ2ZXIgcmVzcG9uc2UgdGhhdCBjb250YWlucyByZXNvdXJjZXMuXG4gICAqL1xuICB1c2VUeXBlcz86IHtcbiAgICByZXNvdXJjZXM6IEFycmF5PG5ldyAoLi4uYXJnczogYW55W10pID0+IFJlc291cmNlPjtcbiAgICBlbWJlZGRlZFJlc291cmNlcz86IEFycmF5PG5ldyAoLi4uYXJnczogYW55W10pID0+IEVtYmVkZGVkUmVzb3VyY2U+O1xuICB9O1xuXG4gIC8qKlxuICAgKiB7QGNvZGUgdHJ1ZX0gd2hlbiBydW5uaW5nIGluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQsIHtAY29kZSBmYWxzZX0gb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNQcm9kdWN0aW9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmeWluZyBmb3JtYXQgZm9yIHNvbWUgdHlwZSB2YWx1ZXMuXG4gICAqL1xuICB0eXBlc0Zvcm1hdD86IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGRhdGUgZm9ybWF0IHdpbGwgYmUgdXNlZCB3aGVuIHBhcnNlIHtAbGluayBSZXNvdXJjZX0gcHJvcGVydGllcy5cbiAgICAgKiBJZiB0aGUgcHJvcGVydHkgd2lsbCBiZSBtYXRjaCB0byBzb21lIG9uZSBvZiBzcGVjaWZpZWQgZm9ybWF0cywgdGhlbiB0aGUgcHJvcGVydHkgdHlwZSB3aWxsIGJlIGFzIERhdGUgb2JqZWN0LlxuICAgICAqIE90aGVyd2lzZSwgcmF3IHR5cGUgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQuXG4gICAgICovXG4gICAgZGF0ZT86IHtcbiAgICAgIC8qKlxuICAgICAgICogRGF0ZSBwYXR0ZXJuLlxuICAgICAgICogVGhlIHtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZ30gbGliIGlzIHVzZWQgdG8gcGFyc2UgZGF0ZSB3aXRoIHBhdHRlcm5zLCB1c2UgcGF0dGVybnMgc3VwcG9ydGVkIGJ5IHRoaXMgbGliLlxuICAgICAgICogU2VlIG1vcmUgYWJvdXQgc3VwcG9ydGVkIGZvcm1hdHMgPGEgaHJlZj0naHR0cHM6Ly9kYXRlLWZucy5vcmcvdjIuMjguMC9kb2NzL3BhcnNlJz5oZXJlPC9hPi5cbiAgICAgICAqL1xuICAgICAgcGF0dGVybnM6IEFycmF5PHN0cmluZz47XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBMZXQgdG8gY2hhbmdlIGRlZmF1bHQgcGFnZSBwYXJhbXMgdGhhdCBpcyBzaXplID0gMjAsIHBhZ2UgPSAwLlxuICAgKi9cbiAgcGFnaW5hdGlvbj86IHtcbiAgICBkZWZhdWx0UGFnZToge1xuICAgICAgc2l6ZTogbnVtYmVyO1xuICAgICAgcGFnZT86IG51bWJlcjtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiB0byBzcGVjaWZ5IHNldHRpbmdzIGZvciBIQUwgZm9ybWF0LlxuICAgKi9cbiAgaGFsRm9ybWF0Pzoge1xuICAgIGNvbGxlY3Rpb25zPzoge1xuICAgICAgLyoqXG4gICAgICAgKiBJZiB7QGNvZGUgdHJ1ZX0sIHRoZW4gZm9yIGVtcHR5IGNvbGxlY3Rpb25zLCBub3QgcmVxdWlyZWQgdG8gc3BlY2lmeSBfZW1iZWRkZWQgcHJvcGVydHkuXG4gICAgICAgKiBXaGVuIHtAY29kZSBmYWxzZX0gKGJlIGRlZmF1bHQpLCB5b3UgbmVlZCB0byBzcGVjaWZ5IGVtcHR5IF9lbWJlZGRlZCBwcm9wZXJ0eSBmb3IgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICAgKlxuICAgICAgICogQnkgZGVmYXVsdCwgU3ByaW5nIERhdGEgUkVTVCBpbmNsdWRlcyBlbXB0eSBfZW1iZWRkZWQgcHJvcGVydHkgZm9yIGVtcHR5IGNvbGxlY3Rpb25zLFxuICAgICAgICogYnV0IHdoZW4gdXNpbmcgU3ByaW5nIEhBVEVPQVMgeW91IG5lZWQgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICAgKlxuICAgICAgICogUmVjb21tZW5kaW5nIHVzZSBTcHJpbmcgRGF0YSBSRVNUIGFwcHJvYWNoIGFuZCByZXR1cm4gZW1wdHkgX2VtYmVkZGVkIHByb3BlcnR5IGZvciBlbXB0eSBjb2xsZWN0aW9uXG4gICAgICAgKiBmb3IgbW9yZSBwcmVkaWN0YWJsZSBkZXRlcm1pbmUgcmVzb3VyY2UgdHlwZSBhbGdvcml0aG0uXG4gICAgICAgKi9cbiAgICAgIGVtYmVkZGVkT3B0aW9uYWw6IGJvb2xlYW47XG4gICAgfVxuICB9O1xuXG59XG4iXX0=