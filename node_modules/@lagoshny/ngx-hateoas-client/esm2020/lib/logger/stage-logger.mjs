import { ConsoleLogger } from './console-logger';
import { Stage } from './stage.enum';
import { LibConfig } from '../config/lib-config';
import { capitalize, isEmpty, isNil, isObject, isString } from 'lodash-es';
import { RESOURCE_NAME_PROP } from '../model/declarations';
/**
 * Simplify logger calls.
 */
/* tslint:disable:no-string-literal */
export class StageLogger {
    static resourceBeginLog(resource, method, params) {
        if (!LibConfig.getConfig().logs.verboseLogs && !LibConfig.getConfig().isProduction) {
            return;
        }
        const paramToLog = this.prepareParams(params);
        let resourceName;
        if (isString(resource)) {
            resourceName = resource;
        }
        else if (!isNil(resource)) {
            resourceName = RESOURCE_NAME_PROP in resource ? resource[RESOURCE_NAME_PROP] : 'EmbeddedResource';
        }
        else {
            resourceName = 'NOT_DEFINED_RESOURCE_NAME';
        }
        ConsoleLogger.resourcePrettyInfo(`${capitalize(resourceName)} ${method}`, `STAGE ${Stage.BEGIN}`, paramToLog);
    }
    static resourceEndLog(resource, method, params) {
        if (!LibConfig.getConfig().logs.verboseLogs && !LibConfig.getConfig().isProduction) {
            return;
        }
        const paramToLog = this.prepareParams(params);
        let resourceName;
        if (isString(resource)) {
            resourceName = resource;
        }
        else {
            resourceName = RESOURCE_NAME_PROP in resource ? resource[RESOURCE_NAME_PROP] : 'EmbeddedResource';
        }
        ConsoleLogger.resourcePrettyInfo(`${capitalize(resourceName)} ${method}`, `STAGE ${Stage.END}`, paramToLog);
    }
    static stageLog(stage, params) {
        if (!LibConfig.getConfig().logs.verboseLogs && !LibConfig.getConfig().isProduction) {
            return;
        }
        const paramToLog = this.prepareParams(params);
        ConsoleLogger.prettyInfo(`STAGE ${stage}`, paramToLog);
    }
    static stageErrorLog(stage, params) {
        if (LibConfig.getConfig().isProduction) {
            return;
        }
        const paramToLog = this.prepareParams(params);
        ConsoleLogger.prettyError(`STAGE ${stage}`, paramToLog);
    }
    static stageWarnLog(stage, params) {
        if (LibConfig.getConfig().isProduction) {
            return;
        }
        const paramToLog = this.prepareParams(params);
        ConsoleLogger.prettyWarn(`STAGE ${stage}`, paramToLog);
    }
    static prepareParams(params) {
        const paramToLog = {};
        if (isEmpty(params)) {
            return paramToLog;
        }
        for (const [key, value] of Object.entries(params)) {
            if (!params.hasOwnProperty(key)) {
                continue;
            }
            if (isObject(value)) {
                paramToLog[key] = JSON.stringify(value, null, 2);
            }
            else {
                paramToLog[key] = value;
            }
        }
        return paramToLog;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2UtbG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhhdGVvYXMtY2xpZW50L3NyYy9saWIvbG9nZ2VyL3N0YWdlLWxvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFM0Q7O0dBRUc7QUFFSCxzQ0FBc0M7QUFDdEMsTUFBTSxPQUFPLFdBQVc7SUFFZixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBeUIsRUFBRSxNQUFjLEVBQUUsTUFBZTtRQUN2RixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFO1lBQ2xGLE9BQU87U0FDUjtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUMsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdEIsWUFBWSxHQUFHLFFBQVEsQ0FBQztTQUN6QjthQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsWUFBWSxHQUFHLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFD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R0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2xEO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDekI7U0FDRjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnNvbGVMb2dnZXIgfSBmcm9tICcuL2NvbnNvbGUtbG9nZ2VyJztcbmltcG9ydCB7IFN0YWdlIH0gZnJvbSAnLi9zdGFnZS5lbnVtJztcbmltcG9ydCB7IExpYkNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9saWItY29uZmlnJztcbmltcG9ydCB7IGNhcGl0YWxpemUsIGlzRW1wdHksIGlzTmlsLCBpc09iamVjdCwgaXNTdHJpbmcgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUkVTT1VSQ0VfTkFNRV9QUk9QIH0gZnJvbSAnLi4vbW9kZWwvZGVjbGFyYXRpb25zJztcblxuLyoqXG4gKiBTaW1wbGlmeSBsb2dnZXIgY2FsbHMuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8tc3RyaW5nLWxpdGVyYWwgKi9cbmV4cG9ydCBjbGFzcyBTdGFnZUxvZ2dlciB7XG5cbiAgcHVibGljIHN0YXRpYyByZXNvdXJjZUJlZ2luTG9nKHJlc291cmNlOiBvYmplY3QgfCBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QpOiB2b2lkIHtcbiAgICBpZiAoIUxpYkNvbmZpZy5nZXRDb25maWcoKS5sb2dzLnZlcmJvc2VMb2dzICYmICFMaWJDb25maWcuZ2V0Q29uZmlnKCkuaXNQcm9kdWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtVG9Mb2cgPSB0aGlzLnByZXBhcmVQYXJhbXMocGFyYW1zKTtcblxuICAgIGxldCByZXNvdXJjZU5hbWU7XG4gICAgaWYgKGlzU3RyaW5nKHJlc291cmNlKSkge1xuICAgICAgcmVzb3VyY2VOYW1lID0gcmVzb3VyY2U7XG4gICAgfSBlbHNlIGlmICghaXNOaWwocmVzb3VyY2UpKSB7XG4gICAgICByZXNvdXJjZU5hbWUgPSBSRVNPVVJDRV9OQU1FX1BST1AgaW4gcmVzb3VyY2UgPyByZXNvdXJjZVtSRVNPVVJDRV9OQU1FX1BST1BdIDogJ0VtYmVkZGVkUmVzb3VyY2UnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvdXJjZU5hbWUgPSAnTk9UX0RFRklORURfUkVTT1VSQ0VfTkFNRSc7XG4gICAgfVxuICAgIENvbnNvbGVMb2dnZXIucmVzb3VyY2VQcmV0dHlJbmZvKGAkeyBjYXBpdGFsaXplKHJlc291cmNlTmFtZSkgfSAkeyBtZXRob2QgfWAsXG4gICAgICBgU1RBR0UgJHsgU3RhZ2UuQkVHSU4gfWAsIHBhcmFtVG9Mb2cpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZXNvdXJjZUVuZExvZyhyZXNvdXJjZTogb2JqZWN0IHwgc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBvYmplY3QpOiB2b2lkIHtcbiAgICBpZiAoIUxpYkNvbmZpZy5nZXRDb25maWcoKS5sb2dzLnZlcmJvc2VMb2dzICYmICFMaWJDb25maWcuZ2V0Q29uZmlnKCkuaXNQcm9kdWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtVG9Mb2cgPSB0aGlzLnByZXBhcmVQYXJhbXMocGFyYW1zKTtcblxuICAgIGxldCByZXNvdXJjZU5hbWU7XG4gICAgaWYgKGlzU3RyaW5nKHJlc291cmNlKSkge1xuICAgICAgcmVzb3VyY2VOYW1lID0gcmVzb3VyY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc291cmNlTmFtZSA9IFJFU09VUkNFX05BTUVfUFJPUCBpbiByZXNvdXJjZSA/IHJlc291cmNlW1JFU09VUkNFX05BTUVfUFJPUF0gOiAnRW1iZWRkZWRSZXNvdXJjZSc7XG4gICAgfVxuXG4gICAgQ29uc29sZUxvZ2dlci5yZXNvdXJjZVByZXR0eUluZm8oYCR7IGNhcGl0YWxpemUocmVzb3VyY2VOYW1lKSB9ICR7IG1ldGhvZCB9YCxcbiAgICAgIGBTVEFHRSAkeyBTdGFnZS5FTkQgfWAsIHBhcmFtVG9Mb2cpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzdGFnZUxvZyhzdGFnZTogU3RhZ2UsIHBhcmFtczogb2JqZWN0KTogdm9pZCB7XG4gICAgaWYgKCFMaWJDb25maWcuZ2V0Q29uZmlnKCkubG9ncy52ZXJib3NlTG9ncyAmJiAhTGliQ29uZmlnLmdldENvbmZpZygpLmlzUHJvZHVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbVRvTG9nID0gdGhpcy5wcmVwYXJlUGFyYW1zKHBhcmFtcyk7XG5cbiAgICBDb25zb2xlTG9nZ2VyLnByZXR0eUluZm8oYFNUQUdFICR7IHN0YWdlIH1gLCBwYXJhbVRvTG9nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc3RhZ2VFcnJvckxvZyhzdGFnZTogU3RhZ2UsIHBhcmFtczogb2JqZWN0KTogdm9pZCB7XG4gICAgaWYgKExpYkNvbmZpZy5nZXRDb25maWcoKS5pc1Byb2R1Y3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1Ub0xvZyA9IHRoaXMucHJlcGFyZVBhcmFtcyhwYXJhbXMpO1xuXG4gICAgQ29uc29sZUxvZ2dlci5wcmV0dHlFcnJvcihgU1RBR0UgJHsgc3RhZ2UgfWAsIHBhcmFtVG9Mb2cpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzdGFnZVdhcm5Mb2coc3RhZ2U6IFN0YWdlLCBwYXJhbXM6IG9iamVjdCk6IHZvaWQge1xuICAgIGlmIChMaWJDb25maWcuZ2V0Q29uZmlnKCkuaXNQcm9kdWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtVG9Mb2cgPSB0aGlzLnByZXBhcmVQYXJhbXMocGFyYW1zKTtcblxuICAgIENvbnNvbGVMb2dnZXIucHJldHR5V2FybihgU1RBR0UgJHsgc3RhZ2UgfWAsIHBhcmFtVG9Mb2cpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcHJlcGFyZVBhcmFtcyhwYXJhbXM6IG9iamVjdCkge1xuICAgIGNvbnN0IHBhcmFtVG9Mb2cgPSB7fTtcbiAgICBpZiAoaXNFbXB0eShwYXJhbXMpKSB7XG4gICAgICByZXR1cm4gcGFyYW1Ub0xvZztcbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgICAgaWYgKCFwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcGFyYW1Ub0xvZ1trZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1Ub0xvZ1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbVRvTG9nO1xuICB9XG59XG4iXX0=