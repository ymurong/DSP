import { Injectable } from '@angular/core';
import { HttpMethod, RESOURCE_NAME_PROP, RESOURCE_OPTIONS_PROP } from '../../model/declarations';
import { ResourceUtils } from '../../util/resource.utils';
import { tap } from 'rxjs/operators';
import { StageLogger } from '../../logger/stage-logger';
import { ValidationUtils } from '../../util/validation.utils';
import * as i0 from "@angular/core";
import * as i1 from "../internal/common-resource-http.service";
import * as i2 from "../internal/resource-http.service";
import * as i3 from "../internal/resource-collection-http.service";
import * as i4 from "../internal/paged-resource-collection-http.service";
import * as i5 from "../internal/cache/resource-cache.service";
/**
 * Service to operate with {@link Resource}.
 *
 * Can be injected as standalone service to work with {@link Resource}.
 */
/* tslint:disable:no-string-literal */
export class HateoasResourceService {
    constructor(commonHttpService, resourceHttpService, resourceCollectionHttpService, pagedResourceCollectionHttpService, cacheService) {
        this.commonHttpService = commonHttpService;
        this.resourceHttpService = resourceHttpService;
        this.resourceCollectionHttpService = resourceCollectionHttpService;
        this.pagedResourceCollectionHttpService = pagedResourceCollectionHttpService;
        this.cacheService = cacheService;
    }
    /**
     * Get resource by id.
     *
     * @param resourceType resource for which will perform request
     * @param id resource id
     * @param options (optional) options that should be applied to the request
     * @throws error when required params are not valid
     */
    getResource(resourceType, id, options) {
        ValidationUtils.validateInputParams({ resourceType, id });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_RESOURCE', { id, options });
        return this.resourceHttpService.getResource(resourceName, resourceType[RESOURCE_OPTIONS_PROP], id, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService GET_RESOURCE', { result: `get resource '${resourceName}' was successful` });
        }));
    }
    /**
     * Get collection of the resource by id.
     *
     * @param resourceType resource for which will perform request
     * @param options (optional) options that should be applied to the request
     * @throws error when required params are not valid
     */
    getCollection(resourceType, options) {
        ValidationUtils.validateInputParams({ resourceType });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_COLLECTION', { options });
        return this.resourceCollectionHttpService
            .getResourceCollection(resourceName, resourceType[RESOURCE_OPTIONS_PROP], options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService GET_COLLECTION', { result: `get all resources by '${resourceName}' was successful` });
        }));
    }
    /**
     * Get paged collection of the resource by id.
     *
     * @param resourceType resource for which will perform request
     * @param options (optional) options that should be applied to the request
     * @throws error when required params are not valid
     */
    getPage(resourceType, options) {
        ValidationUtils.validateInputParams({ resourceType });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_PAGE', { options });
        return this.pagedResourceCollectionHttpService
            .getResourcePage(resourceName, resourceType[RESOURCE_OPTIONS_PROP], options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService GET_PAGE', { result: `get all page resources by '${resourceName}' was successful` });
        }));
    }
    /**
     * Create resource.
     *
     * @param resourceType resource for which will perform request
     * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}
     * @param options (optional) options that should be applied to the request {@link RequestOption}
     * @throws error when required params are not valid
     */
    createResource(resourceType, requestBody, options) {
        ValidationUtils.validateInputParams({ resourceType, requestBody });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        StageLogger.resourceBeginLog(resourceName, 'ResourceService CREATE_RESOURCE', { requestBody, options });
        const body = ResourceUtils.resolveValues(requestBody);
        return this.resourceHttpService.postResource(resourceName, resourceType[RESOURCE_OPTIONS_PROP], body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService CREATE_RESOURCE', { result: `resource '${resourceName}' was created successful` });
        }));
    }
    /**
     * Updating all resource properties at the time to passed body properties. If some properties are not passed then will be used null value.
     * If you need update some part resource properties, use {@link HateoasResourceService#patchResource} method.
     *
     * @param entity to update
     * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}
     * @param options (optional) options that should be applied to the request {@link RequestOption}
     * @throws error when required params are not valid
     */
    updateResource(entity, requestBody, options) {
        ValidationUtils.validateInputParams({ entity });
        StageLogger.resourceBeginLog(entity, 'ResourceService UPDATE_RESOURCE', {
            body: requestBody ? requestBody : entity,
            options
        });
        const resource = ResourceUtils.initResource(entity);
        const body = ResourceUtils.resolveValues(requestBody ? requestBody : { body: entity });
        return this.resourceHttpService.put(resource.getSelfLinkHref(), body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(entity, 'ResourceService UPDATE_RESOURCE', { result: `resource '${resource[RESOURCE_NAME_PROP]}' was updated successful` });
        }));
    }
    /**
     * Update resource by id.
     * Updating all resource properties at the time to passed body properties. If some properties are not passed then will be used null value.
     * If you need update some part resource properties, use {@link HateoasResourceService#patchResource} method.
     *
     * @param resourceType resource for which will perform request
     * @param id resource id
     * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}
     * @param options (optional) options that should be applied to the request {@link RequestOption}
     * @throws error when required params are not valid
     */
    updateResourceById(resourceType, id, requestBody, options) {
        ValidationUtils.validateInputParams({ resourceType, id, requestBody });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        StageLogger.resourceBeginLog(resourceName, 'ResourceService UPDATE_RESOURCE_BY_ID', {
            id,
            body: requestBody,
            options
        });
        const body = ResourceUtils.resolveValues(requestBody);
        return this.resourceHttpService.putResource(resourceName, resourceType[RESOURCE_OPTIONS_PROP], id, body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService UPDATE_RESOURCE_BY_ID', { result: `resource '${resourceName}' with id ${id} was updated successful` });
        }));
    }
    /**
     * Patch resource.
     * Allows fine-grained update resource properties, it means that only passed properties in body will be changed,
     * other properties stay as is.
     *
     * @param entity to patch
     * @param requestBody (optional) contains the body that will be patched resource and optional body values option {@link ValuesOption}
     *        if not passed then entity will be passed as body directly
     * @param options (optional) options that should be applied to the request {@link RequestOption}
     * @throws error when required params are not valid
     */
    patchResource(entity, requestBody, options) {
        ValidationUtils.validateInputParams({ entity });
        StageLogger.resourceBeginLog(entity, 'ResourceService PATCH_RESOURCE', {
            body: requestBody ? requestBody : entity,
            options
        });
        const resource = ResourceUtils.initResource(entity);
        const body = ResourceUtils.resolveValues(requestBody ? requestBody : { body: entity });
        return this.resourceHttpService.patch(resource.getSelfLinkHref(), body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(entity, 'ResourceService PATCH_RESOURCE', { result: `resource '${entity[RESOURCE_NAME_PROP]}' was patched successful` });
        }));
    }
    /**
     * Patch resource by id.
     * Allows fine-grained update resource properties, it means that only passed properties in body will be changed,
     * other properties stay as is.
     *
     * @param resourceType resource for which will perform request
     * @param id resource id
     * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}
     * @param options (optional) options that should be applied to the request {@link RequestOption}
     * @throws error when required params are not valid
     */
    patchResourceById(resourceType, id, requestBody, options) {
        ValidationUtils.validateInputParams({ resourceType, id, requestBody });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        StageLogger.resourceBeginLog(resourceName, 'ResourceService PATCH_RESOURCE_BY_ID', {
            id,
            body: requestBody,
            options
        });
        const body = ResourceUtils.resolveValues(requestBody);
        return this.resourceHttpService.patchResource(resourceName, resourceType[RESOURCE_OPTIONS_PROP], id, body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService PATCH_RESOURCE_BY_ID', { result: `resource '${resourceName}' with id ${id} was patched successful` });
        }));
    }
    /**
     * Delete resource.
     *
     * @param entity to delete
     * @param options (optional) options that should be applied to the request
     * @throws error when required params are not valid
     */
    deleteResource(entity, options) {
        ValidationUtils.validateInputParams({ entity });
        StageLogger.resourceBeginLog(entity, 'ResourceService DELETE_RESOURCE', { options });
        const resource = ResourceUtils.initResource(entity);
        return this.resourceHttpService.delete(resource.getSelfLinkHref(), options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(entity, 'ResourceService DELETE_RESOURCE', { result: `resource '${resource[RESOURCE_NAME_PROP]}' was deleted successful` });
        }));
    }
    /**
     * Delete resource by id.
     *
     * @param resourceType resource for which will perform request
     * @param id resource id
     * @param options (optional) options that should be applied to the request
     * @throws error when required params are not valid
     */
    deleteResourceById(resourceType, id, options) {
        ValidationUtils.validateInputParams({ resourceType, id });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        StageLogger.resourceBeginLog(resourceName, 'ResourceService DELETE_RESOURCE_BY_ID', { id, options });
        return this.resourceHttpService.deleteResource(resourceName, resourceType[RESOURCE_OPTIONS_PROP], id, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService DELETE_RESOURCE_BY_ID', { result: `resource '${resourceName}' with id ${id} was deleted successful` });
        }));
    }
    /**
     * {@see ResourceCollectionHttpService#search}
     */
    searchCollection(resourceType, searchQuery, options) {
        ValidationUtils.validateInputParams({ resourceType, searchQuery });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_COLLECTION', { query: searchQuery, options });
        return this.resourceCollectionHttpService
            .search(resourceName, resourceType[RESOURCE_OPTIONS_PROP], searchQuery, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_COLLECTION', { result: `search collection by '${resourceName}' was performed successful` });
        }));
    }
    /**
     * {@see PagedResourceCollection#search}
     */
    searchPage(resourceType, searchQuery, options) {
        ValidationUtils.validateInputParams({ resourceType, searchQuery });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_PAGE', { query: searchQuery, options });
        return this.pagedResourceCollectionHttpService
            .search(resourceName, resourceType[RESOURCE_OPTIONS_PROP], searchQuery, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_PAGE', { result: `search page by '${resourceName}' was performed successful` });
        }));
    }
    /**
     * {@see ResourceHttpService#search}
     */
    searchResource(resourceType, searchQuery, options) {
        ValidationUtils.validateInputParams({ resourceType, searchQuery });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_SINGLE', { query: searchQuery, options });
        return this.resourceHttpService.search(resourceName, resourceType[RESOURCE_OPTIONS_PROP], searchQuery, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_SINGLE', { result: `search single by '${resourceName}' was performed successful` });
        }));
    }
    /**
     * {@see CommonResourceHttpService#customQuery}
     */
    customQuery(resourceType, method, query, requestBody, options) {
        ValidationUtils.validateInputParams({ resourceType, method, query });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService CUSTOM_QUERY', {
            method: HttpMethod,
            query,
            requestBody,
            options
        });
        const body = ResourceUtils.resolveValues(requestBody);
        return this.commonHttpService.customQuery(resourceName, resourceType[RESOURCE_OPTIONS_PROP], method, query, body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService CUSTOM_QUERY', { result: `custom query by '${resourceName}' was performed successful` });
        }));
    }
    /**
     * Differences between {@link HateoasResourceService#customQuery} and this method
     * that this one puts 'search' path to the result url automatically.
     *
     * {@see CommonResourceHttpService#customQuery}
     */
    customSearchQuery(resourceType, method, searchQuery, requestBody, options) {
        ValidationUtils.validateInputParams({ resourceType, method, searchQuery });
        const resourceName = resourceType[RESOURCE_NAME_PROP];
        options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);
        StageLogger.resourceBeginLog(resourceName, 'ResourceService CUSTOM_SEARCH_QUERY', {
            method: HttpMethod,
            searchQuery,
            requestBody,
            options
        });
        const body = ResourceUtils.resolveValues(requestBody);
        const query = `/search${searchQuery.startsWith('/') ? searchQuery : '/' + searchQuery}`;
        return this.commonHttpService.customQuery(resourceName, resourceType[RESOURCE_OPTIONS_PROP], method, query, body, options)
            .pipe(tap(() => {
            StageLogger.resourceEndLog(resourceName, 'ResourceService CUSTOM_SEARCH_QUERY', { result: `custom search query by '${resourceName}' was performed successful` });
        }));
    }
    /**
     * Evict all resources cache.
     */
    evictResourcesCache() {
        this.cacheService.evictAll();
    }
}
HateoasResourceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: HateoasResourceService, deps: [{ token: i1.CommonResourceHttpService }, { token: i2.ResourceHttpService }, { token: i3.ResourceCollectionHttpService }, { token: i4.PagedResourceCollectionHttpService }, { token: i5.ResourceCacheService }], target: i0.ɵɵFactoryTarget.Injectable });
HateoasResourceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: HateoasResourceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: HateoasResourceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CommonResourceHttpService }, { type: i2.ResourceHttpService }, { type: i3.ResourceCollectionHttpService }, { type: i4.PagedResourceCollectionHttpService }, { type: i5.ResourceCacheService }]; } });
//# sourceMappingURL=data:application/json;base64,