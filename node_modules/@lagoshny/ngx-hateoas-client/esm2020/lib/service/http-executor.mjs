import { of as observableOf } from 'rxjs';
import { tap } from 'rxjs/operators';
import { StageLogger } from '../logger/stage-logger';
import { Stage } from '../logger/stage.enum';
import { ValidationUtils } from '../util/validation.utils';
import { CacheKey } from './internal/cache/model/cache-key';
import { isResourceObject } from '../model/resource-type';
import { LibConfig } from '../config/lib-config';
import { CacheUtils } from '../util/cache.utils';
/**
 * Base class with common logics to perform HTTP requests.
 */
/* tslint:disable:no-string-literal */
export class HttpExecutor {
    constructor(httpClient, cacheService) {
        this.httpClient = httpClient;
        this.cacheService = cacheService;
    }
    static logRequest(method, url, options, body) {
        const params = {
            method,
            url,
            options: {
                ...options,
                params: options?.params?.keys().length > 0 ? options?.params.toString() : '',
            }
        };
        if (body) {
            params['body'] = body;
        }
        StageLogger.stageLog(Stage.HTTP_REQUEST, params);
    }
    static logResponse(method, url, options, data) {
        StageLogger.stageLog(Stage.HTTP_RESPONSE, {
            method,
            url,
            options: {
                ...options,
                params: options?.params?.keys().length > 0 ? options?.params.toString() : '',
            },
            result: data
        });
    }
    /**
     * Perform GET request.
     *
     * @param url to perform request
     * @param options (optional) options that applied to the request
     * @param useCache value {@code true} if need to use cache, {@code false} otherwise
     * @throws error when required params are not valid
     */
    getHttp(url, options, useCache) {
        ValidationUtils.validateInputParams({ url });
        if (CacheUtils.shouldUseCache(useCache)) {
            const cachedValue = this.cacheService.getResource(CacheKey.of(url, options));
            if (cachedValue != null) {
                return observableOf(cachedValue);
            }
        }
        HttpExecutor.logRequest('GET', url, options);
        let response;
        if (options?.observe === 'response') {
            response = this.httpClient.get(url, { ...options, observe: 'response' });
        }
        else {
            response = this.httpClient.get(url, { ...options, observe: 'body' });
        }
        return response.pipe(tap((data) => {
            HttpExecutor.logResponse('GET', url, options, data);
            if (CacheUtils.shouldUseCache(useCache) && isResourceObject(data)) {
                this.cacheService.putResource(CacheKey.of(url, options), data);
            }
        }));
    }
    /**
     * Perform POST request.
     *
     * @param url to perform request
     * @param body to send with request
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    postHttp(url, body, options) {
        HttpExecutor.logRequest('POST', url, options, body);
        ValidationUtils.validateInputParams({ url });
        let response;
        if (options?.observe === 'response') {
            response = this.httpClient.post(url, body, { ...options, observe: 'response' });
        }
        else {
            response = this.httpClient.post(url, body, { ...options, observe: 'body' });
        }
        return response.pipe(tap((data) => {
            HttpExecutor.logResponse('POST', url, options, data);
            if (LibConfig.getConfig().cache.enabled) {
                this.cacheService.evictResource(CacheKey.of(url, options));
            }
        }));
    }
    /**
     * Perform PUT request.
     *
     * @param url to perform request
     * @param body to send with request
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    putHttp(url, body, options) {
        HttpExecutor.logRequest('PUT', url, options, body);
        ValidationUtils.validateInputParams({ url });
        let response;
        if (options?.observe === 'response') {
            response = this.httpClient.put(url, body, { ...options, observe: 'response' });
        }
        else {
            response = this.httpClient.put(url, body, { ...options, observe: 'body' });
        }
        return response.pipe(tap((data) => {
            HttpExecutor.logResponse('PUT', url, options, data);
            if (LibConfig.getConfig().cache.enabled) {
                this.cacheService.evictResource(CacheKey.of(url, options));
            }
        }));
    }
    /**
     * Perform PATCH request.
     *
     * @param url to perform request
     * @param body to send with request
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    patchHttp(url, body, options) {
        HttpExecutor.logRequest('PATCH', url, options, body);
        ValidationUtils.validateInputParams({ url });
        let response;
        if (options?.observe === 'response') {
            response = this.httpClient.patch(url, body, { ...options, observe: 'response' });
        }
        else {
            response = this.httpClient.patch(url, body, { ...options, observe: 'body' });
        }
        return response.pipe(tap((data) => {
            HttpExecutor.logResponse('PATCH', url, options, data);
            if (LibConfig.getConfig().cache.enabled) {
                this.cacheService.evictResource(CacheKey.of(url, options));
            }
        }));
    }
    /**
     * Perform DELETE request.
     *
     * @param url to perform request
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    deleteHttp(url, options) {
        HttpExecutor.logRequest('DELETE', url, options);
        ValidationUtils.validateInputParams({ url });
        let response;
        if (options?.observe === 'response') {
            response = this.httpClient.delete(url, { ...options, observe: 'response' });
        }
        else {
            response = this.httpClient.delete(url, { ...options, observe: 'body' });
        }
        return response.pipe(tap((data) => {
            HttpExecutor.logResponse('DELETE', url, options, data);
            if (LibConfig.getConfig().cache.enabled) {
                this.cacheService.evictResource(CacheKey.of(url, options));
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,