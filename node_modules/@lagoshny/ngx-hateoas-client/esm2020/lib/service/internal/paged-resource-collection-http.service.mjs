import { Injectable } from '@angular/core';
import { LibConfig } from '../../config/lib-config';
import { catchError, map } from 'rxjs/operators';
import { getResourceType, isPagedResourceCollection } from '../../model/resource-type';
import { throwError as observableThrowError } from 'rxjs';
import { ResourceUtils } from '../../util/resource.utils';
import { UrlUtils } from '../../util/url.utils';
import { DependencyInjector } from '../../util/dependency-injector';
import { HttpExecutor } from '../http-executor';
import { StageLogger } from '../../logger/stage-logger';
import { Stage } from '../../logger/stage.enum';
import { ValidationUtils } from '../../util/validation.utils';
import { CacheKey } from './cache/model/cache-key';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./cache/resource-cache.service";
/**
 * Get instance of the PagedResourceCollectionHttpService by Angular DependencyInjector.
 */
export function getPagedResourceCollectionHttpService() {
    return DependencyInjector.get(PagedResourceCollectionHttpService);
}
/**
 * Service to perform HTTP requests to get {@link PagedResourceCollection} type.
 */
export class PagedResourceCollectionHttpService extends HttpExecutor {
    constructor(httpClient, cacheService) {
        super(httpClient, cacheService);
    }
    /**
     * Perform GET request to retrieve paged collection of the resources.
     *
     * @param url to perform request
     * @param options request options
     * @throws error when required params are not valid or returned resource type is not paged collection of the resources
     */
    get(url, options) {
        const httpOptions = UrlUtils.convertToHttpOptions(options);
        return super.getHttp(url, httpOptions, options?.useCache)
            .pipe(map((data) => {
            if (!isPagedResourceCollection(data)) {
                if (LibConfig.getConfig().cache.enabled) {
                    this.cacheService.evictResource(CacheKey.of(url, httpOptions));
                }
                const errMsg = `You try to get wrong resource type: expected PagedResourceCollection type, actual ${getResourceType(data)} type.`;
                StageLogger.stageErrorLog(Stage.INIT_RESOURCE, { error: errMsg, options });
                throw new Error(errMsg);
            }
            return ResourceUtils.instantiatePagedResourceCollection(data, httpOptions?.params?.has('projection'));
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform get paged resource collection request with url built by the resource name.
     *
     * @param resourceName used to build root url to the resource
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    getResourcePage(resourceName, resourceOptions, options) {
        ValidationUtils.validateInputParams({ resourceName });
        const url = UrlUtils.removeTemplateParams(UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName));
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}'`,
            options
        });
        return this.get(url, UrlUtils.fillDefaultPageDataIfNoPresent(options));
    }
    /**
     *  Perform search paged resource collection request with url built by the resource name.
     *
     * @param resourceName used to build root url to the resource
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param searchQuery name of the search method
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    search(resourceName, resourceOptions, searchQuery, options) {
        ValidationUtils.validateInputParams({ resourceName, searchQuery });
        const url = UrlUtils.removeTemplateParams(UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName)).concat('/search/' + searchQuery);
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}'`,
            options
        });
        return this.get(url, UrlUtils.fillDefaultPageDataIfNoPresent(options));
    }
}
PagedResourceCollectionHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PagedResourceCollectionHttpService, deps: [{ token: i1.HttpClient }, { token: i2.ResourceCacheService }], target: i0.ɵɵFactoryTarget.Injectable });
PagedResourceCollectionHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PagedResourceCollectionHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PagedResourceCollectionHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.ResourceCacheService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZWQtcmVzb3VyY2UtY29sbGVjdGlvbi1odHRwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaGF0ZW9hcy1jbGllbnQvc3JjL2xpYi9zZXJ2aWNlL2ludGVybmFsL3BhZ2VkLXJlc291cmNlLWNvbGxlY3Rpb24taHR0cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZGLE9BQU8sRUFBYyxVQUFVLElBQUksb0JBQW9CLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBSW5EOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHFDQUFxQztJQUNuRCxPQUFPLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FB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RUFBRTtZQUN0QyxNQUFNLEVBQUUsR0FBRztZQUNYLFFBQVEsRUFBRSxhQUFjLFFBQVEsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBRSxpQkFBa0IsWUFBYSxHQUFHO1lBQ3hHLE9BQU87U0FDUixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7OytIQXBGVSxrQ0FBa0M7bUlBQWxDLGtDQUFrQyxjQUZqQyxNQUFNOzJGQUVQLGtDQUFrQztrQkFIOUMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9tb2RlbC9yZXNvdXJjZS9iYXNlLXJlc291cmNlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBMaWJDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvbGliLWNvbmZpZyc7XG5pbXBvcnQgeyBQYWdlZFJlc291cmNlQ29sbGVjdGlvbiB9IGZyb20gJy4uLy4uL21vZGVsL3Jlc291cmNlL3BhZ2VkLXJlc291cmNlLWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZ2V0UmVzb3VyY2VUeXBlLCBpc1BhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWwvcmVzb3VyY2UtdHlwZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIGFzIG9ic2VydmFibGVUaHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZXNvdXJjZVV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9yZXNvdXJjZS51dGlscyc7XG5pbXBvcnQgeyBVcmxVdGlscyB9IGZyb20gJy4uLy4uL3V0aWwvdXJsLnV0aWxzJztcbmltcG9ydCB7IERlcGVuZGVuY3lJbmplY3RvciB9IGZyb20gJy4uLy4uL3V0aWwvZGVwZW5kZW5jeS1pbmplY3Rvcic7XG5pbXBvcnQgeyBQYWdlZEdldE9wdGlvbiB9IGZyb20gJy4uLy4uL21vZGVsL2RlY2xhcmF0aW9ucyc7XG5pbXBvcnQgeyBIdHRwRXhlY3V0b3IgfSBmcm9tICcuLi9odHRwLWV4ZWN1dG9yJztcbmltcG9ydCB7IFN0YWdlTG9nZ2VyIH0gZnJvbSAnLi4vLi4vbG9nZ2VyL3N0YWdlLWxvZ2dlcic7XG5pbXBvcnQgeyBTdGFnZSB9IGZyb20gJy4uLy4uL2xvZ2dlci9zdGFnZS5lbnVtJztcbmltcG9ydCB7IFZhbGlkYXRpb25VdGlscyB9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdGlvbi51dGlscyc7XG5pbXBvcnQgeyBDYWNoZUtleSB9IGZyb20gJy4vY2FjaGUvbW9kZWwvY2FjaGUta2V5JztcbmltcG9ydCB7IFJlc291cmNlQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9jYWNoZS9yZXNvdXJjZS1jYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IFJlc291cmNlT3B0aW9uIH0gZnJvbSAnLi4vLi4vY29uZmlnL2hhdGVvYXMtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEdldCBpbnN0YW5jZSBvZiB0aGUgUGFnZWRSZXNvdXJjZUNvbGxlY3Rpb25IdHRwU2VydmljZSBieSBBbmd1bGFyIERlcGVuZGVuY3lJbmplY3Rvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uSHR0cFNlcnZpY2UoKTogUGFnZWRSZXNvdXJjZUNvbGxlY3Rpb25IdHRwU2VydmljZSB7XG4gIHJldHVybiBEZXBlbmRlbmN5SW5qZWN0b3IuZ2V0KFBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uSHR0cFNlcnZpY2UpO1xufVxuXG4vKipcbiAqIFNlcnZpY2UgdG8gcGVyZm9ybSBIVFRQIHJlcXVlc3RzIHRvIGdldCB7QGxpbmsgUGFnZWRSZXNvdXJjZUNvbGxlY3Rpb259IHR5cGUuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdlZFJlc291cmNlQ29sbGVjdGlvbkh0dHBTZXJ2aWNlIGV4dGVuZHMgSHR0cEV4ZWN1dG9yIHtcblxuICBjb25zdHJ1Y3RvcihodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuICAgICAgICAgICAgICBjYWNoZVNlcnZpY2U6IFJlc291cmNlQ2FjaGVTZXJ2aWNlKSB7XG4gICAgc3VwZXIoaHR0cENsaWVudCwgY2FjaGVTZXJ2aWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIEdFVCByZXF1ZXN0IHRvIHJldHJpZXZlIHBhZ2VkIGNvbGxlY3Rpb24gb2YgdGhlIHJlc291cmNlcy5cbiAgICpcbiAgICogQHBhcmFtIHVybCB0byBwZXJmb3JtIHJlcXVlc3RcbiAgICogQHBhcmFtIG9wdGlvbnMgcmVxdWVzdCBvcHRpb25zXG4gICAqIEB0aHJvd3MgZXJyb3Igd2hlbiByZXF1aXJlZCBwYXJhbXMgYXJlIG5vdCB2YWxpZCBvciByZXR1cm5lZCByZXNvdXJjZSB0eXBlIGlzIG5vdCBwYWdlZCBjb2xsZWN0aW9uIG9mIHRoZSByZXNvdXJjZXNcbiAgICovXG4gIHB1YmxpYyBnZXQ8VCBleHRlbmRzIFBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uPEJhc2VSZXNvdXJjZT4+KHVybDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPzogUGFnZWRHZXRPcHRpb24pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBjb25zdCBodHRwT3B0aW9ucyA9IFVybFV0aWxzLmNvbnZlcnRUb0h0dHBPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmdldEh0dHAodXJsLCBodHRwT3B0aW9ucywgb3B0aW9ucz8udXNlQ2FjaGUpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoIWlzUGFnZWRSZXNvdXJjZUNvbGxlY3Rpb24oZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChMaWJDb25maWcuZ2V0Q29uZmlnKCkuY2FjaGUuZW5hYmxlZCkge1xuICAgICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZS5ldmljdFJlc291cmNlKENhY2hlS2V5Lm9mKHVybCwgaHR0cE9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVyck1zZyA9IGBZb3UgdHJ5IHRvIGdldCB3cm9uZyByZXNvdXJjZSB0eXBlOiBleHBlY3RlZCBQYWdlZFJlc291cmNlQ29sbGVjdGlvbiB0eXBlLCBhY3R1YWwgJHsgZ2V0UmVzb3VyY2VUeXBlKGRhdGEpIH0gdHlwZS5gO1xuICAgICAgICAgICAgU3RhZ2VMb2dnZXIuc3RhZ2VFcnJvckxvZyhTdGFnZS5JTklUX1JFU09VUkNFLCB7ZXJyb3I6IGVyck1zZywgb3B0aW9uc30pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlc291cmNlVXRpbHMuaW5zdGFudGlhdGVQYWdlZFJlc291cmNlQ29sbGVjdGlvbihkYXRhLCBodHRwT3B0aW9ucz8ucGFyYW1zPy5oYXMoJ3Byb2plY3Rpb24nKSkgYXMgVDtcbiAgICAgICAgfSksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4gb2JzZXJ2YWJsZVRocm93RXJyb3IoZXJyb3IpKSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBnZXQgcGFnZWQgcmVzb3VyY2UgY29sbGVjdGlvbiByZXF1ZXN0IHdpdGggdXJsIGJ1aWx0IGJ5IHRoZSByZXNvdXJjZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gcmVzb3VyY2VOYW1lIHVzZWQgdG8gYnVpbGQgcm9vdCB1cmwgdG8gdGhlIHJlc291cmNlXG4gICAqIEBwYXJhbSByZXNvdXJjZU9wdGlvbnMgYWRkaXRpb25hbCByZXNvdXJjZSBvcHRpb25zIHtAbGluayBSZXNvdXJjZU9wdGlvbn1cbiAgICogQHBhcmFtIG9wdGlvbnMgKG9wdGlvbmFsKSBvcHRpb25zIHRoYXQgYXBwbGllZCB0byB0aGUgcmVxdWVzdFxuICAgKiBAdGhyb3dzIGVycm9yIHdoZW4gcmVxdWlyZWQgcGFyYW1zIGFyZSBub3QgdmFsaWRcbiAgICovXG4gIHB1YmxpYyBnZXRSZXNvdXJjZVBhZ2U8VCBleHRlbmRzIFBhZ2VkUmVzb3VyY2VDb2xsZWN0aW9uPEJhc2VSZXNvdXJjZT4+KHJlc291cmNlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU9wdGlvbnM6IFJlc291cmNlT3B0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPzogUGFnZWRHZXRPcHRpb24pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBWYWxpZGF0aW9uVXRpbHMudmFsaWRhdGVJbnB1dFBhcmFtcyh7cmVzb3VyY2VOYW1lfSk7XG5cbiAgICBjb25zdCB1cmwgPSBVcmxVdGlscy5yZW1vdmVUZW1wbGF0ZVBhcmFtcyhVcmxVdGlscy5nZW5lcmF0ZVJlc291cmNlVXJsKFVybFV0aWxzLmdldEFwaVVybChyZXNvdXJjZU9wdGlvbnMucm91dGVOYW1lKSwgcmVzb3VyY2VOYW1lKSk7XG5cbiAgICBTdGFnZUxvZ2dlci5zdGFnZUxvZyhTdGFnZS5QUkVQQVJFX1VSTCwge1xuICAgICAgcmVzdWx0OiB1cmwsXG4gICAgICB1cmxQYXJ0czogYGJhc2VVcmw6ICckeyBVcmxVdGlscy5nZXRBcGlVcmwocmVzb3VyY2VPcHRpb25zLnJvdXRlTmFtZSkgfScsIHJlc291cmNlOiAnJHsgcmVzb3VyY2VOYW1lIH0nYCxcbiAgICAgIG9wdGlvbnNcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmdldCh1cmwsIFVybFV0aWxzLmZpbGxEZWZhdWx0UGFnZURhdGFJZk5vUHJlc2VudChvcHRpb25zKSk7XG4gIH1cblxuICAvKipcbiAgICogIFBlcmZvcm0gc2VhcmNoIHBhZ2VkIHJlc291cmNlIGNvbGxlY3Rpb24gcmVxdWVzdCB3aXRoIHVybCBidWlsdCBieSB0aGUgcmVzb3VyY2UgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHJlc291cmNlTmFtZSB1c2VkIHRvIGJ1aWxkIHJvb3QgdXJsIHRvIHRoZSByZXNvdXJjZVxuICAgKiBAcGFyYW0gcmVzb3VyY2VPcHRpb25zIGFkZGl0aW9uYWwgcmVzb3VyY2Ugb3B0aW9ucyB7QGxpbmsgUmVzb3VyY2VPcHRpb259XG4gICAqIEBwYXJhbSBzZWFyY2hRdWVyeSBuYW1lIG9mIHRoZSBzZWFyY2ggbWV0aG9kXG4gICAqIEBwYXJhbSBvcHRpb25zIChvcHRpb25hbCkgb3B0aW9ucyB0aGF0IGFwcGxpZWQgdG8gdGhlIHJlcXVlc3RcbiAgICogQHRocm93cyBlcnJvciB3aGVuIHJlcXVpcmVkIHBhcmFtcyBhcmUgbm90IHZhbGlkXG4gICAqL1xuICBwdWJsaWMgc2VhcmNoPFQgZXh0ZW5kcyBQYWdlZFJlc291cmNlQ29sbGVjdGlvbjxCYXNlUmVzb3VyY2U+PihyZXNvdXJjZU5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VPcHRpb25zOiBSZXNvdXJjZU9wdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoUXVlcnk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz86IFBhZ2VkR2V0T3B0aW9uKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgVmFsaWRhdGlvblV0aWxzLnZhbGlkYXRlSW5wdXRQYXJhbXMoe3Jlc291cmNlTmFtZSwgc2VhcmNoUXVlcnl9KTtcblxuICAgIGNvbnN0IHVybCA9IFVybFV0aWxzLnJlbW92ZVRlbXBsYXRlUGFyYW1zKFxuICAgICAgVXJsVXRpbHMuZ2VuZXJhdGVSZXNvdXJjZVVybChVcmxVdGlscy5nZXRBcGlVcmwocmVzb3VyY2VPcHRpb25zLnJvdXRlTmFtZSksIHJlc291cmNlTmFtZSkpLmNvbmNhdCgnL3NlYXJjaC8nICsgc2VhcmNoUXVlcnkpO1xuXG4gICAgU3RhZ2VMb2dnZXIuc3RhZ2VMb2coU3RhZ2UuUFJFUEFSRV9VUkwsIHtcbiAgICAgIHJlc3VsdDogdXJsLFxuICAgICAgdXJsUGFydHM6IGBiYXNlVXJsOiAnJHsgVXJsVXRpbHMuZ2V0QXBpVXJsKHJlc291cmNlT3B0aW9ucy5yb3V0ZU5hbWUpIH0nLCByZXNvdXJjZTogJyR7IHJlc291cmNlTmFtZSB9J2AsXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXQodXJsLCBVcmxVdGlscy5maWxsRGVmYXVsdFBhZ2VEYXRhSWZOb1ByZXNlbnQob3B0aW9ucykpO1xuICB9XG5cbn1cbiJdfQ==