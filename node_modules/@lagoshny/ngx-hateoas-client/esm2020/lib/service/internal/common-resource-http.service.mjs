import { HttpExecutor } from '../http-executor';
import { Injectable } from '@angular/core';
import { throwError as observableThrowError } from 'rxjs';
import { HttpMethod } from '../../model/declarations';
import { UrlUtils } from '../../util/url.utils';
import { map } from 'rxjs/operators';
import { isPagedResourceCollection, isResource, isResourceCollection } from '../../model/resource-type';
import { ResourceUtils } from '../../util/resource.utils';
import { Stage } from '../../logger/stage.enum';
import { StageLogger } from '../../logger/stage-logger';
import { ValidationUtils } from '../../util/validation.utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./cache/resource-cache.service";
/**
 * Service to perform HTTP requests to get any type of the {@link Resource}, {@link PagedResourceCollection}, {@link ResourceCollection}.
 */
export class CommonResourceHttpService extends HttpExecutor {
    constructor(httpClient, cacheService) {
        super(httpClient, cacheService);
    }
    /**
     * Perform custom HTTP request.
     *
     * Return type depends on result data it can be {@link Resource}, {@link ResourceCollection},
     * {@link PagedResourceCollection} or any data.
     *
     * @param resourceName used to build root url to the resource
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param method HTTP method that will be perform {@link HttpMethod}
     * @param query url path that applied to the result url at the end
     * @param body (optional) request body
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    customQuery(resourceName, resourceOptions, method, query, body, options) {
        ValidationUtils.validateInputParams({ resourceName, method, query });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName, query);
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', query: '${query}'`,
            options
        });
        const httpOptions = UrlUtils.convertToHttpOptions(options);
        let result;
        switch (method) {
            case HttpMethod.GET:
                result = super.getHttp(url, httpOptions, false);
                break;
            case HttpMethod.POST:
                result = super.postHttp(url, body, httpOptions);
                break;
            case HttpMethod.PUT:
                result = super.putHttp(url, body, httpOptions);
                break;
            case HttpMethod.PATCH:
                result = super.patchHttp(url, body, httpOptions);
                break;
            default:
                const errMsg = `allowed ony GET/POST/PUT/PATCH http methods you pass ${method}`;
                StageLogger.stageErrorLog(Stage.HTTP_REQUEST, { error: errMsg, options });
                return observableThrowError(new Error(errMsg));
        }
        return result.pipe(map(data => {
            const isProjection = httpOptions?.params?.has('projection');
            if (isPagedResourceCollection(data)) {
                return ResourceUtils.instantiatePagedResourceCollection(data, isProjection);
            }
            else if (isResourceCollection(data)) {
                return ResourceUtils.instantiateResourceCollection(data, isProjection);
            }
            else if (isResource(data)) {
                return ResourceUtils.instantiateResource(data, isProjection);
            }
            else {
                return data;
            }
        }));
    }
}
CommonResourceHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CommonResourceHttpService, deps: [{ token: i1.HttpClient }, { token: i2.ResourceCacheService }], target: i0.ɵɵFactoryTarget.Injectable });
CommonResourceHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CommonResourceHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CommonResourceHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.ResourceCacheService }]; } });
//# sourceMappingURL=data:application/json;base64,