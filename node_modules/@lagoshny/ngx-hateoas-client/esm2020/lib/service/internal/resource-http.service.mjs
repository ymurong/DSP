import { Injectable } from '@angular/core';
import { throwError as observableThrowError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { ResourceUtils } from '../../util/resource.utils';
import { DependencyInjector } from '../../util/dependency-injector';
import { UrlUtils } from '../../util/url.utils';
import { getResourceType, isResource } from '../../model/resource-type';
import { HttpExecutor } from '../http-executor';
import { LibConfig } from '../../config/lib-config';
import { Stage } from '../../logger/stage.enum';
import { StageLogger } from '../../logger/stage-logger';
import { ValidationUtils } from '../../util/validation.utils';
import { toString } from 'lodash-es';
import { CacheKey } from './cache/model/cache-key';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./cache/resource-cache.service";
/**
 * Get instance of the ResourceHttpService by Angular DependencyInjector.
 */
export function getResourceHttpService() {
    return DependencyInjector.get(ResourceHttpService);
}
/**
 * Service to perform HTTP requests to get {@link Resource} type.
 */
export class ResourceHttpService extends HttpExecutor {
    constructor(httpClient, cacheService) {
        super(httpClient, cacheService);
    }
    /**
     * Perform GET request to retrieve resource.
     *
     * @param url to perform request
     * @param options request options
     * @throws error when required params are not valid or returned resource type is not resource
     */
    get(url, options) {
        const httpOptions = UrlUtils.convertToHttpOptions(options);
        return super.getHttp(url, httpOptions, options?.useCache)
            .pipe(map((data) => {
            if (!isResource(data)) {
                if (LibConfig.getConfig().cache.enabled) {
                    this.cacheService.evictResource(CacheKey.of(url, httpOptions));
                }
                const errMsg = `You try to get wrong resource type: expected Resource type, actual ${getResourceType(data)} type.`;
                StageLogger.stageErrorLog(Stage.INIT_RESOURCE, {
                    options,
                    error: errMsg
                });
                throw new Error(errMsg);
            }
            return ResourceUtils.instantiateResource(data, httpOptions?.params?.has('projection'));
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform POST request.
     *
     * @param url to perform request
     * @param body request body
     * @param options request options
     * @throws error when required params are not valid
     */
    post(url, body, options) {
        return super.postHttp(url, body, UrlUtils.convertToHttpOptions(options))
            .pipe(map((data) => {
            if (isResource(data)) {
                return ResourceUtils.instantiateResource(data);
            }
            return data;
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform PUT request.
     *
     * @param url to perform request
     * @param body request body
     * @param options request options
     * @throws error when required params are not valid
     */
    put(url, body, options) {
        return super.putHttp(url, body, UrlUtils.convertToHttpOptions(options))
            .pipe(map((data) => {
            if (isResource(data)) {
                return ResourceUtils.instantiateResource(data);
            }
            return data;
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform PATCH request.
     *
     * @param url to perform request
     * @param body request body
     * @param options request options
     * @throws error when required params are not valid
     */
    patch(url, body, options) {
        return super.patchHttp(url, body, UrlUtils.convertToHttpOptions(options))
            .pipe(map((data) => {
            if (isResource(data)) {
                return ResourceUtils.instantiateResource(data);
            }
            return data;
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform DELETE request.
     *
     * @param url to perform request
     * @param options request options
     * @throws error when required params are not valid
     */
    delete(url, options) {
        return super.deleteHttp(url, {
            ...UrlUtils.convertToHttpOptions(options),
            observe: options?.observe ? options?.observe : 'response'
        })
            .pipe(map((data) => {
            if (isResource(data)) {
                return ResourceUtils.instantiateResource(data);
            }
            return data;
        }), catchError(error => observableThrowError(error)));
    }
    /**
     * Perform get resource request with url built by the resource name.
     *
     * @param resourceName used to build root url to the resource
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param id resource id
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    getResource(resourceName, resourceOptions, id, options) {
        ValidationUtils.validateInputParams({ resourceName, id });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName).concat('/', toString(id));
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', id: '${id}'`,
            options
        });
        return this.get(url, options);
    }
    /**
     * Perform POST resource request with url built by the resource name.
     *
     * @param resourceName to be post
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param body resource to create
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    postResource(resourceName, resourceOptions, body, options) {
        ValidationUtils.validateInputParams({ resourceName, body });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName);
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}'`,
            options
        });
        return this.post(url, body, options);
    }
    /**
     * Perform PATCH resource request with url built by the resource name and resource id.
     *
     * @param resourceName to be patched
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param id resource id
     * @param body contains data to patch resource properties
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    patchResource(resourceName, resourceOptions, id, body, options) {
        ValidationUtils.validateInputParams({ resourceName, id, body });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName, toString(id));
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', resourceId: '${id}'`,
            options
        });
        return this.patch(url, body, options);
    }
    /**
     * Perform PUT resource request with url built by the resource name and resource id.
     *
     * @param resourceName to be put
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param id resource id
     * @param body contains data to replace resource properties
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    putResource(resourceName, resourceOptions, id, body, options) {
        ValidationUtils.validateInputParams({ resourceName, id, body });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName, toString(id));
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', resourceId: '${id}'`,
            options
        });
        return this.put(url, body, options);
    }
    /**
     * Perform DELETE resource request with url built by the resource name and resource id.
     *
     * @param resourceName to be deleted
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param id resource id
     * @param options (optional) additional options that will be applied to the request
     * @throws error when required params are not valid
     */
    deleteResource(resourceName, resourceOptions, id, options) {
        ValidationUtils.validateInputParams({ resourceName, id });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName, toString(id));
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', resourceId: '${id}'`,
            options
        });
        return this.delete(url, options);
    }
    /**
     * Perform search single resource request with url built by the resource name.
     *
     * @param resourceName used to build root url to the resource
     * @param resourceOptions additional resource options {@link ResourceOption}
     * @param searchQuery name of the search method
     * @param options (optional) options that applied to the request
     * @throws error when required params are not valid
     */
    search(resourceName, resourceOptions, searchQuery, options) {
        ValidationUtils.validateInputParams({ resourceName, searchQuery });
        const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(resourceOptions.routeName), resourceName)
            .concat('/search/' + searchQuery);
        StageLogger.stageLog(Stage.PREPARE_URL, {
            result: url,
            urlParts: `baseUrl: '${UrlUtils.getApiUrl(resourceOptions.routeName)}', resource: '${resourceName}', searchQuery: '${searchQuery}'`,
            options
        });
        return this.get(url, options);
    }
}
ResourceHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResourceHttpService, deps: [{ token: i1.HttpClient }, { token: i2.ResourceCacheService }], target: i0.ɵɵFactoryTarget.Injectable });
ResourceHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResourceHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResourceHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.ResourceCacheService }]; } });
//# sourceMappingURL=data:application/json;base64,