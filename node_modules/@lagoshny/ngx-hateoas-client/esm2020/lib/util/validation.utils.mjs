import { StageLogger } from '../logger/stage-logger';
import { Stage } from '../logger/stage.enum';
import { isArray, isEmpty, isFunction, isNil, isObject, isPlainObject, isString } from 'lodash-es';
import { RESOURCE_NAME_PROP } from '../model/declarations';
export class ValidationUtils {
    /**
     * Checks that passed object with params has all valid params.
     * Params should not has null, undefined, empty object, empty string values.
     *
     * @param params object with params to check
     * @throws error if any params are not defined
     */
    static validateInputParams(params) {
        if (isNil(params)) {
            const errMsg = 'Passed params object is not valid';
            StageLogger.stageErrorLog(Stage.CHECK_PARAMS, { error: errMsg });
            throw new Error(errMsg);
        }
        const notValidParams = [];
        for (const [key, value] of Object.entries(params)) {
            // tslint:disable-next-line:no-string-literal
            if (isFunction(value) && isFunction(value.constructor) && !value[RESOURCE_NAME_PROP]) {
                throw new Error(`Resource '${value.name}' has not 'resourceName' value. Set it with @HateoasResource decorator on '${value.name}' class.`);
            }
            if (isNil(value)
                || (isString(value) && !value)
                || (isPlainObject(value) && isEmpty(value))
                || (isArray(value) && value.length === 0)) {
                let formattedValue = value;
                if (isObject(value)) {
                    formattedValue = JSON.stringify(value, null, 2);
                }
                notValidParams.push(`'${key} = ${formattedValue}'`);
            }
        }
        if (notValidParams.length > 0) {
            const errMsg = `Passed param(s) ${notValidParams.join(', ')} ${notValidParams.length > 1 ? 'are' : 'is'} not valid`;
            StageLogger.stageErrorLog(Stage.CHECK_PARAMS, { error: errMsg });
            throw new Error(errMsg);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi51dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oYXRlb2FzLWNsaWVudC9zcmMvbGliL3V0aWwvdmFsaWRhdGlvbi51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFM0QsTUFBTSxPQUFPLGVBQWU7SUFFMUI7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQWM7UUFDOUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDakIsTUFBTSxNQUFNLEdBQUcsbUNBQW1DLENBQUM7WUFDbkQsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7WUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjtRQUVELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUMxQixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqRCw2Q0FBNkM7WUFDN0MsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO2dCQUNwRixNQUFNLElBQUksS0FBSyxDQUFDLGFBQWMsS0FBSyxDQUFDLElBQUssOEVBQStFLEtBQUssQ0FBQyxJQUFLLFVBQVUsQ0FBQyxDQUFDO2FBQ2hKO1lBRUQsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO21CQUNYLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO21CQUMzQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7bUJBQ3hDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBRTNDLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ25CLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSyxHQUFJLE1BQU8sY0FBZSxHQUFHLENBQUMsQ0FBQzthQUN6RDtTQUNGO1FBQ0QsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixNQUFNLE1BQU0sR0FBRyxtQkFBb0IsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsSUFBSyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFLLFlBQVksQ0FBQztZQUN4SCxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztZQUMvRCxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhZ2VMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvc3RhZ2UtbG9nZ2VyJztcbmltcG9ydCB7IFN0YWdlIH0gZnJvbSAnLi4vbG9nZ2VyL3N0YWdlLmVudW0nO1xuaW1wb3J0IHsgaXNBcnJheSwgaXNFbXB0eSwgaXNGdW5jdGlvbiwgaXNOaWwsIGlzT2JqZWN0LCBpc1BsYWluT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSRVNPVVJDRV9OQU1FX1BST1AgfSBmcm9tICcuLi9tb2RlbC9kZWNsYXJhdGlvbnMnO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvblV0aWxzIHtcblxuICAvKipcbiAgICogQ2hlY2tzIHRoYXQgcGFzc2VkIG9iamVjdCB3aXRoIHBhcmFtcyBoYXMgYWxsIHZhbGlkIHBhcmFtcy5cbiAgICogUGFyYW1zIHNob3VsZCBub3QgaGFzIG51bGwsIHVuZGVmaW5lZCwgZW1wdHkgb2JqZWN0LCBlbXB0eSBzdHJpbmcgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIG9iamVjdCB3aXRoIHBhcmFtcyB0byBjaGVja1xuICAgKiBAdGhyb3dzIGVycm9yIGlmIGFueSBwYXJhbXMgYXJlIG5vdCBkZWZpbmVkXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHZhbGlkYXRlSW5wdXRQYXJhbXMocGFyYW1zOiBvYmplY3QpOiB2b2lkIHtcbiAgICBpZiAoaXNOaWwocGFyYW1zKSkge1xuICAgICAgY29uc3QgZXJyTXNnID0gJ1Bhc3NlZCBwYXJhbXMgb2JqZWN0IGlzIG5vdCB2YWxpZCc7XG4gICAgICBTdGFnZUxvZ2dlci5zdGFnZUVycm9yTG9nKFN0YWdlLkNIRUNLX1BBUkFNUywge2Vycm9yOiBlcnJNc2d9KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgIH1cblxuICAgIGNvbnN0IG5vdFZhbGlkUGFyYW1zID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb25zdHJ1Y3RvcikgJiYgIXZhbHVlW1JFU09VUkNFX05BTUVfUFJPUF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXNvdXJjZSAnJHsgdmFsdWUubmFtZSB9JyBoYXMgbm90ICdyZXNvdXJjZU5hbWUnIHZhbHVlLiBTZXQgaXQgd2l0aCBASGF0ZW9hc1Jlc291cmNlIGRlY29yYXRvciBvbiAnJHsgdmFsdWUubmFtZSB9JyBjbGFzcy5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTmlsKHZhbHVlKVxuICAgICAgICB8fCAoaXNTdHJpbmcodmFsdWUpICYmICF2YWx1ZSlcbiAgICAgICAgfHwgKGlzUGxhaW5PYmplY3QodmFsdWUpICYmIGlzRW1wdHkodmFsdWUpKVxuICAgICAgICB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSkge1xuXG4gICAgICAgIGxldCBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgbm90VmFsaWRQYXJhbXMucHVzaChgJyR7IGtleSB9ID0gJHsgZm9ybWF0dGVkVmFsdWUgfSdgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vdFZhbGlkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVyck1zZyA9IGBQYXNzZWQgcGFyYW0ocykgJHsgbm90VmFsaWRQYXJhbXMuam9pbignLCAnKSB9ICR7IG5vdFZhbGlkUGFyYW1zLmxlbmd0aCA+IDEgPyAnYXJlJyA6ICdpcycgfSBub3QgdmFsaWRgO1xuICAgICAgU3RhZ2VMb2dnZXIuc3RhZ2VFcnJvckxvZyhTdGFnZS5DSEVDS19QQVJBTVMsIHtlcnJvcjogZXJyTXNnfSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICB9XG4gIH1cblxufVxuIl19